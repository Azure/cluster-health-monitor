# Based on https://github.com/Azure/aks-app-routing-operator/blob/main/.github/workflows/test.yaml
name: aks_e2e
on:
  repository_dispatch:
    types: [ok-to-test-command]

jobs:
  get_ref: 
    name: "Get ref"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      checkout_ref: ${{ steps.checkout_ref.outputs.CHECKOUT_REF }}
      status_ref: ${{ steps.status_ref.outputs.STATUS_REF }}
    steps:
      # checkout repo so we can ls-remote. we can use main for this
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      # get the ref of the merge commit. we want to get the full sha instead of the tag so we can guarantee
      # it won't change by a user pushing a new change
      - id: checkout_ref 
        env:
          MERGE_REF: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'
        run: |
          CHECKOUT_REF=$(git ls-remote -q | grep $MERGE_REF | awk '{print $1}')
          echo "Ref is $CHECKOUT_REF"
          echo "CHECKOUT_REF=$CHECKOUT_REF" >> $GITHUB_OUTPUT
      # guarantee the ref is what we want to use by ensuring the ok-to-test'd sha matches
      - id: status_ref
        env:
          HEAD_REF: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/head'
          OK_REF_PREFIX:  ${{ github.event.client_payload.slash_command.args.named.sha }}
        run: |
         LATEST=$(git ls-remote -q | grep $HEAD_REF | awk '{print $1}')
         echo "STATUS_REF=$LATEST" >> $GITHUB_OUTPUT
         echo "Comparing latest $LATEST with prefix $OK_REF_PREFIX"
         if [[ $LATEST != $OK_REF_PREFIX* ]]; then
          echo "latest ref doesn't match what was ok-to-test'd"
          exit 1
         fi

  provision_aks:
    name: "Provision AKS and Deploy"
    runs-on: ubuntu-latest
    needs: [get_ref]
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ needs.get_ref.outputs.checkout_ref }}
      
      - name: Azure Login
        uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a # v2.1.1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
      
      - name: Create ACR
        env:
          SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        run: |
          # Create resource group if it doesn't exist
          az group create \
            --name "chm-e2e-${{ github.run_id }}" \
            --location "canadacentral" \
            --subscription "$SUBSCRIPTION_ID"
          
          # Create Azure Container Registry
          az acr create \
            --name "chme2e${{ github.run_id }}" \
            --resource-group "chm-e2e${{ github.run_id }}" \
            --location "canadacentral" \
            --sku "Basic" \
            --subscription "$SUBSCRIPTION_ID"
      
      - name: Run provision script
        env:
          SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        run: |
          # Create AKS Automatic cluster and deploy
          ./hack/provision-aks-and-deploy.sh \
            --subscription "$SUBSCRIPTION_ID" \
            --location "canadacentral" \
            --resource-group "chm-e2e-${{ github.run_id }}" \
            --cluster-name "chm-e2e-${{ github.run_id }}" \
            --acr-resource-id "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/chme2e${{ github.run_id }}/providers/Microsoft.ContainerRegistry/registries/chme2e${{ github.run_id }}" \
            --aks-automatic

  cleanup:
    name: "Cleanup Resources"
    runs-on: ubuntu-latest
    needs: [get_ref, provision_aks]
    if: always()
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ needs.get_ref.outputs.checkout_ref }}
      
      - name: Azure Login
        uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a # v2.1.1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
      
      - name: Run cleanup script
        env:
          SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        run: |
          # Delete resource group and all resources
          ./hack/provision-aks-and-deploy.sh \
            --subscription "$SUBSCRIPTION_ID" \
            --location "canadacentral" \
            --resource-group "chm-e2e-${{ github.run_id }}" \
            --cluster-name "chm-e2e-${{ github.run_id }}" \
            --cleanup
